name: Rust Nightly Release

# 优化后的触发条件 - 确保标签格式匹配
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # 匹配语义化版本标签 (v1.0.0)
      - 'v[0-9]+.[0-9]+'          # 匹配简化版本标签 (v1.0)
  workflow_dispatch:
    inputs:
      version:
        description: '手动指定版本号 (例如 1.0.0)'
        required: true
        default: '1.0.0'

# 添加调试信息输出
env:
  PROJECT_NAME: nexus_client
  DEBUG_MODE: true

jobs:
  show_context:
    name: Show Trigger Context
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub Context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Ref name: ${{ github.ref_name }}"
          
          echo "HEAD commit:"
          git log -1 --pretty=oneline
          
          echo "All tags:"
          git tag --list

  build_prep:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.extract_version.outputs.version }}
      build_date: ${{ steps.set_date.outputs.build_date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录（包括标签）
          
      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # 处理v前缀
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # 输出用于调试
          echo "Tag name: $TAG_NAME"
          echo "Extracted version: $VERSION"
          
      - name: Set build date
        id: set_date
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          
      - name: Prepare build info
        run: |
          echo "Project: ${{ env.PROJECT_NAME }}" > build-info.txt
          echo "Version: ${{ steps.extract_version.outputs.version }}" >> build-info.txt
          echo "Build date: ${{ steps.set_date.outputs.build_date }}" >> build-info.txt
          echo "Git commit: ${{ github.sha }}" >> build-info.txt
          echo "Triggered by: ${{ github.actor }}" >> build-info.txt
          
      - uses: actions/upload-artifact@v3
        with:
          name: build-info
          path: build-info.txt

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [show_context, build_prep]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux 目标
          - target: linux-gnu
            rust_target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            bin_suffix: linux
          
          - target: linux-musl
            rust_target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            bin_suffix: linux-static
            extra_packages: musl-tools
            
          # Windows 目标
          - target: windows
            rust_target: x86_64-pc-windows-msvc
            os: windows-latest
            bin_suffix: windows.exe
          
          # macOS 目标
          - target: macos-intel
            rust_target: x86_64-apple-darwin
            os: macos-12
            bin_suffix: macos-intel
            
          - target: macos-arm
            rust_target: aarch64-apple-darwin
            os: macos-12
            bin_suffix: macos-arm
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build info
        uses: actions/download-artifact@v3
        with:
          name: build-info
          
      - name: Install system dependencies
        if: matrix.extra_packages || matrix.target == 'macos-intel' || matrix.target == 'macos-arm'
        run: |
          echo "Installing dependencies for ${{ matrix.target }}..."
          
          # Linux 特定的依赖
          if [[ "${{ runner.os }}" == "Linux" && "${{ matrix.extra_packages }}" ]]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.extra_packages }}
          fi
          
          # macOS 依赖
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew update
            brew install llvm || echo "LLVM already installed"
          fi
          
          # Windows 依赖
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install llvm
          fi
          
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rust-src, rustc-dev, llvm-tools-preview
          target: ${{ matrix.rust_target }}
          override: true
          profile: minimal
          
      - name: Build release
        run: |
          # 显示环境信息用于调试
          rustc -Vv
          cargo -V
          
          # 构建项目
          cargo build --release --target ${{ matrix.rust_target }}
          
          # 减小文件大小
          if command -v llvm-strip &> /dev/null; then
            llvm-strip target/${{ matrix.rust_target }}/release/${{ env.PROJECT_NAME }}*
          fi
          
      - name: Prepare artifact
        run: |
          BIN_PATH="target/${{ matrix.rust_target }}/release/${{ env.PROJECT_NAME }}"
          OUTPUT_NAME="${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}"
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp "$BIN_PATH.exe" "$OUTPUT_NAME"
          else
            cp "$BIN_PATH" "$OUTPUT_NAME"
          fi
          
          # 生成校验和
          sha256sum "$OUTPUT_NAME" > "$OUTPUT_NAME.sha256"
          
          # 输出调试信息
          echo "Bin path: $BIN_PATH"
          echo "Output name: $OUTPUT_NAME"
          ls -lh "$OUTPUT_NAME"
        
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binary
          path: |
            ${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}
            ${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}.sha256

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build info
        uses: actions/download-artifact@v3
        with:
          name: build-info
          
      - name: Download all binaries
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          pattern: '*-binary'
          merge-multiple: true
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "Release ${{ needs.build_prep.outputs.version_tag }}"
          body: |
            # ${{ env.PROJECT_NAME }} ${{ needs.build_prep.outputs.version_tag }}
            
            Built with Rust nightly
            Build date: ${{ needs.build_prep.outputs.build_date }}
            
            ## Downloads
            - Linux (glibc): ${{ env.PROJECT_NAME }}-linux
            - Linux (static): ${{ env.PROJECT_NAME }}-linux-static
            - Windows: ${{ env.PROJECT_NAME }}-windows.exe
            - macOS Intel: ${{ env.PROJECT_NAME }}-macos-intel
            - macOS ARM: ${{ env.PROJECT_NAME }}-macos-arm
            
          draft: false
          prerelease: false
          files: |
            artifacts/*.sha256
            artifacts/linux-gnu-binary/${{ env.PROJECT_NAME }}-linux
            artifacts/linux-musl-binary/${{ env.PROJECT_NAME }}-linux-static
            artifacts/windows-binary/${{ env.PROJECT_NAME }}-windows.exe
            artifacts/macos-intel-binary/${{ env.PROJECT_NAME }}-macos-intel
            artifacts/macos-arm-binary/${{ env.PROJECT_NAME }}-macos-arm