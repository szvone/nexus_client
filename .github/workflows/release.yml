name: Rust Nightly Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: '手动指定版本号 (例如 1.0.0)'
        required: true
        default: '1.0.0'
        
env:
  PROJECT_NAME: myapp

jobs:
  build_prep:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.extract_version.outputs.version }}
      build_date: ${{ steps.set_date.outputs.build_date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Set build date
        id: set_date
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          
      - name: Prepare build info
        run: |
          echo "Project: ${{ env.PROJECT_NAME }}" > build-info.txt
          echo "Version: ${{ steps.extract_version.outputs.version }}" >> build-info.txt
          echo "Build date: ${{ steps.set_date.outputs.build_date }}" >> build-info.txt
          echo "Git commit: ${{ github.sha }}" >> build-info.txt
          echo "Triggered by: ${{ github.actor }}" >> build-info.txt
          
      # 使用更新后的 artifact 上传方法
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: build_prep
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux 目标
          - target: linux-gnu
            rust_target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            bin_suffix: linux
          
          - target: linux-musl
            rust_target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            bin_suffix: linux-static
            extra_packages: musl-tools
            
          # Windows 目标
          - target: windows
            rust_target: x86_64-pc-windows-msvc
            os: windows-latest
            bin_suffix: windows.exe
          
          # macOS 目标
          - target: macos-intel
            rust_target: x86_64-apple-darwin
            os: macos-latest
            bin_suffix: macos-intel
            
          - target: macos-arm
            rust_target: aarch64-apple-darwin
            os: macos-latest
            bin_suffix: macos-arm
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: build-info
          
      - name: Install system dependencies
        if: matrix.extra_packages
        run: |
          if [[ "${{ runner.os }}" == "Linux" && "${{ matrix.extra_packages }}" ]]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.extra_packages }}
          fi
          
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: ${{ matrix.rust_target }}
          
      - name: Build release
        run: |
          cargo build --release --target ${{ matrix.rust_target }}
          
          # 减小文件大小
          if command -v llvm-strip &> /dev/null; then
            llvm-strip target/${{ matrix.rust_target }}/release/${{ env.PROJECT_NAME }}*
          elif which strip > /dev/null; then
            strip target/${{ matrix.rust_target }}/release/${{ env.PROJECT_NAME }}
          fi
          
      - name: Prepare artifact
        run: |
          # 修复 Windows 文件名问题
          BIN_PATH="target/${{ matrix.rust_target }}/release/${{ env.PROJECT_NAME }}"
          OUTPUT_NAME="${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}"
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv "$BIN_PATH.exe" "$OUTPUT_NAME"
          else
            mv "$BIN_PATH" "$OUTPUT_NAME"
          fi
          
          # 生成校验和
          if [ "${{ runner.os }}" == "Windows" ]; then
            certutil -hashfile "$OUTPUT_NAME" SHA256 | findstr -v ":" > "$OUTPUT_NAME.sha256"
          else
            sha256sum "$OUTPUT_NAME" > "$OUTPUT_NAME.sha256"
          fi
        
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: |
            ${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}
            ${{ env.PROJECT_NAME }}-${{ matrix.bin_suffix }}.sha256

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: build-info
          
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-binary'
          merge-multiple: true
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "Release ${{ needs.build_prep.outputs.version_tag }}"
          body: |
            # ${{ env.PROJECT_NAME }} ${{ needs.build_prep.outputs.version_tag }}
            
            Build date: ${{ needs.build_prep.outputs.build_date }}
            
            ## Download Assets
            | Platform        | File                              |
            |-----------------|-----------------------------------|
            | Linux (glibc)   | `${{ env.PROJECT_NAME }}-linux`       |
            | Linux (static)  | `${{ env.PROJECT_NAME }}-linux-static`|
            | Windows         | `${{ env.PROJECT_NAME }}-windows.exe` |
            | macOS Intel     | `${{ env.PROJECT_NAME }}-macos-intel` |
            | macOS ARM       | `${{ env.PROJECT_NAME }}-macos-arm`   |
          draft: false
          prerelease: false
          files: |
            artifacts/linux-gnu-binary/${{ env.PROJECT_NAME }}-linux
            artifacts/linux-gnu-binary/${{ env.PROJECT_NAME }}-linux.sha256
            artifacts/linux-musl-binary/${{ env.PROJECT_NAME }}-linux-static
            artifacts/linux-musl-binary/${{ env.PROJECT_NAME }}-linux-static.sha256
            artifacts/windows-binary/${{ env.PROJECT_NAME }}-windows.exe
            artifacts/windows-binary/${{ env.PROJECT_NAME }}-windows.exe.sha256
            artifacts/macos-intel-binary/${{ env.PROJECT_NAME }}-macos-intel
            artifacts/macos-intel-binary/${{ env.PROJECT_NAME }}-macos-intel.sha256
            artifacts/macos-arm-binary/${{ env.PROJECT_NAME }}-macos-arm
            artifacts/macos-arm-binary/${{ env.PROJECT_NAME }}-macos-arm.sha256